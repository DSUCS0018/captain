generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DB_URI")
}

model User {
    id                      Int                      @id @default(autoincrement())
    name                    String
    email                   String                   @unique
    password                String?
    resetToken              String?
    googleId                String?                  @unique
    resetTokenExpiry        DateTime?
    role                    String                   @default("user")
    gender                  String?
    age                     Int?
    phoneNumber             String?
    createdAt               DateTime                 @default(now())
    updatedAt               DateTime                 @updatedAt
    tournaments             Tournament[]
    tournamentRegistrations TournamentRegistration[]
    captainedTeams          Team[]                   @relation("TeamCaptain")
    teamMembers             TeamMember[]
    // teams                   Team[]
    notifications           Notification[]
}

model GamePass {
    id          Int          @id @default(autoincrement())
    title       String
    description String
    price       Float
    isFree      Boolean
    status      String
    fileUrl     String
    tournaments Tournament[]
    createdAt   DateTime     @default(now())
    updatedAt   DateTime     @updatedAt
}

model Team {
    id           Int          @id @default(autoincrement())
    name         String
    tournamentId Int
    tournament   Tournament   @relation(fields: [tournamentId], references: [id])
    captainId    Int
    captain      User         @relation("TeamCaptain", fields: [captainId], references: [id])
    members      TeamMember[]
    createdAt    DateTime     @default(now())
    updatedAt    DateTime     @updatedAt
    // User         User         @relation(fields: [userId], references: [id])
    // userId       Int
    heardFrom    String
}

model TeamMember {
    id        Int      @id @default(autoincrement())
    teamId    Int
    team      Team     @relation(fields: [teamId], references: [id])
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    status    String   @default("pending") // "pending", "accepted", "rejected"
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Tournament {
    id                   Int                      @id @default(autoincrement())
    tournamentType       String
    entryFee             Float
    title                String
    description          String
    status               String
    fileUrl              String
    maxNofTeams          Int
    maxNofPlayersPerTeam Int
    startDate            DateTime
    endDate              DateTime
    gamePassId           Int
    gamePass             GamePass                 @relation(fields: [gamePassId], references: [id])
    userId               Int?
    user                 User?                    @relation(fields: [userId], references: [id])
    createdAt            DateTime                 @default(now())
    updatedAt            DateTime                 @updatedAt
    registrations        TournamentRegistration[]
    teams                Team[]
}

model TournamentRegistration {
    id           Int        @id @default(autoincrement())
    name         String
    gender       String
    age          Int
    teamName     String
    heardFrom    String
    tournament   Tournament @relation(fields: [tournamentId], references: [id])
    tournamentId Int
    user         User       @relation(fields: [userId], references: [id])
    userId       Int
    createdAt    DateTime   @default(now())
    updatedAt    DateTime   @updatedAt
}

model SocialMediaPost {
    id        Int      @id @default(autoincrement())
    platform  String
    url       String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model Notification {
    id        Int      @id @default(autoincrement())
    userId    Int
    user      User     @relation(fields: [userId], references: [id])
    message   String
    type      String // e.g., "invite_sent", "invite_accepted", "invite_rejected"
    read      Boolean  @default(false)
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}
